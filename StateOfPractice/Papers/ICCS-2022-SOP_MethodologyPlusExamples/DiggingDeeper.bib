%% This BibTeX bibliography file was created using BibDesk.
%% https://bibdesk.sourceforge.io/

%% Created for Spencer Smith at 2022-06-23 00:15:49 -0400 


%% Saved with string encoding Unicode (UTF-8) 



@inproceedings{HiltonEtAl2016,
	author = {Hilton, Michael and Tunnell, Timothy and Huang, Kai and Marinov, Darko and Dig, Danny},
	booktitle = {2016 31st IEEE/ACM International Conference on Automated Software Engineering (ASE)},
	date-added = {2022-06-23 00:15:47 -0400},
	date-modified = {2022-06-23 00:15:47 -0400},
	pages = {426--437},
	title = {Usage, costs, and benefits of continuous integration in open-source projects},
	year = {2016},
	bdsk-url-1 = {https://ieeexplore.ieee.org/abstract/document/7582778},
	bdsk-url-2 = {https://dl.acm.org/doi/pdf/10.1145/2970276.2970358}}

@article{SadeghiEtAl2022b,
	author = {Reza Sadeghi and Nadav Gasner and Seyedvahid Khodaei and Julio Garcia and Zahra Keshavarz-Motamed},
	date-added = {2022-06-22 15:14:15 -0400},
	date-modified = {2022-06-22 15:14:15 -0400},
	doi = {https://doi.org/10.1016/j.ijmecsci.2021.107038},
	journal = {International Journal of Mechanical Sciences},
	keywords = {Coarctation, Mixed valvular disease, Aortic fluid dynamics, Hemodynamics, Lattice Boltzmann method, Patient-specific lumped parameter model, Abnormal hemodynamics},
	title = {Impact of mixed valvular disease on coarctation hemodynamics using patient-specific lumped parameter and Lattice Boltzmann modeling},
	url = {https://www.sciencedirect.com/science/article/pii/S0020740321007244},
	volume = {217},
	year = {2022},
	bdsk-url-1 = {https://www.sciencedirect.com/science/article/pii/S0020740321007244},
	bdsk-url-2 = {https://doi.org/10.1016/j.ijmecsci.2021.107038}}

@article{SoodEtAl2019,
	author = {Kanika Sood and Anshu Dubey and boyana norris and Lois Curfman McInnes},
	date-added = {2022-04-09 14:36:45 -0400},
	date-modified = {2022-04-10 13:29:30 -0400},
	doi = {10.6084/m9.figshare.7772894.v2},
	month = {2},
	title = {{Repository-Analysis of Open-source and Scientific Software Development Projects}},
	year = {2019},
	bdsk-url-1 = {https://figshare.com/articles/presentation/Analyzing_Open-source_Scientific_Software_Projects/7772894},
	bdsk-url-2 = {https://doi.org/10.6084/m9.figshare.7772894.v2}}

@article{GrannanEtAl2020,
	abstract = {Scientific discovery increasingly relies on computation through simulations, analytics, and machine and deep learning. Of these, simulations on high-performance computing (HPC) platforms have been the cornerstone of scientific computing for more than two decades. However, the development of simulation software has, in general, occurred through accretion, with a few exceptions. With an increase in scientific understanding, models have become more complex, rendering an accretion mode untenable to the point where software productivity and sustainability have become active concerns in scientific computing. In this survey paper, we examine a modest set of HPC scientific simulation applications that are already using cutting-edge HPC platforms. Several have been in existence for a decade or more. Our objective in this survey is twofold: first, to understand the landscape of scientific computing on HPC platforms in order to distill the currently scattered knowledge about software practices that have helped both developer and software productivity, and second, to understand the kind of tools and methodologies that need attention for continued productivity. },
	author = {A Grannan and K Sood and B Norris and A Dubey},
	date-added = {2022-04-09 14:12:18 -0400},
	date-modified = {2022-04-10 13:22:47 -0400},
	doi = {10.1177/1094342019899451},
	journal = {The International Journal of High Performance Computing Applications},
	number = {4},
	pages = {465-477},
	title = {Understanding the landscape of scientific software used on high-performance computing platforms},
	volume = {34},
	year = {2020},
	bdsk-url-1 = {https://doi.org/10.1177/1094342019899451}}

@article{WieseEtAl2019,
	abstract = {The scientific software community is eagerly embracing software development practices and tools. However, the lack of Computer Science background, in general, and Software Engineering training, in particular, pose a toll on scientists that need to develop software. Although some of the problems that scientific software developers face when developing scientific software are already known in the literature, we believe that a comprehensive characterization of this complex landscape is still missing. In this paper we build a taxonomy of 2,110 problems (the so called ``pains'') reported by 1,577 scientific software developers. These problems are grouped into three major axes: technical-related, social-related, and scientific-related problems. Our report helps to better understand the needs and challenges of this so far not fully understood community.},
	annote = {``Technical-related problems are by far the most common problems that our scientific software developers face. As Figure 1 shows, technical-related problems represent more than 70% of the overall set of problems. The percentages represent the share of respondents that mentioned each pain.''

``According to our respondents, ​Software Requirements and Management is the software engineering discipline that most hurts scientific developers (they account for 23% of the technical problems reported).''

``Problems related to the evolution of ​Functional Requirements (e.g., ``​The objective changes after having worked on it for months​'') was cited by many respondents. Moreover, in spite of its importance, we perceived that writing a good ​Documentation also poses a major issue. For instance, one respondent mentioned that ``​I work with biologists that have little knowledge of programming. Therefore, the software must be easy to use. Write a clear documentation is always a challenge​''. ​Documentation issues are 8.7% of the total problems raised by the respondents, considering the technical, social and scientific-related problems group.''

``Scientific developers also face a hard time when conducting ​Software Testing and Debugging activities, which represents more than 14% of the total pains presented. This is particularly relevant due to the intrinsic non-deterministic nature of exploring research questions, as one respondent mentioned: ``​It's frequently difficult to test scientific software, since you might not even know in advance what the answer should be​''.''

``Finally, the ​Other category groups pains associated with, for instance, the lack of programming background (e.g., ``​not having a software development background (i.e.: learning on the fly)​''), the algorithms' performance (e.g., ``​optimizing code that is not running fast enough (pure engineering issue)​''), and the user experience (e.g., ``​anticipating user behavior and designing [a good] user interface​''). Note that, problems regarding ​Programming Background and software ​Performance represent more than 9% of the total problems cited.''},
	author = {I. S. {Wiese} and I. {Polato} and G. {Pinto}},
	date-added = {2022-02-17 21:52:06 -0500},
	date-modified = {2022-02-17 21:52:06 -0500},
	doi = {10.1109/MS.2019.2899838},
	issn = {0740-7459},
	journal = {IEEE Software},
	keywords = {Pain;Documentation;Programming;Software packages;Software engineering;Encoding;Scientific Software Developers;Pain points;Survey},
	pages = {1-1},
	title = {Naming the Pain in Developing Scientific Software},
	year = {2019},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAhLi4vLi4vLi4vLi4vcHViL1dpZXNlRXRBbDIwMTkucGRmTxEBTgAAAAABTgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////EVdpZXNlRXRBbDIwMTkucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAABAACAAAKIGN1AAAAAAAAAAAAAAAAAANwdWIAAAIAKi86VXNlcnM6c21pdGhzOlJlcG9zOnB1YjpXaWVzZUV0QWwyMDE5LnBkZgAOACQAEQBXAGkAZQBzAGUARQB0AEEAbAAyADAAMQA5AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAoVXNlcnMvc21pdGhzL1JlcG9zL3B1Yi9XaWVzZUV0QWwyMDE5LnBkZgATAAEvAAAVAAIADf//AAAACAANABoAJABIAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAZo=},
	bdsk-url-1 = {https://doi.org/10.1109/MS.2019.2899838}}

@inproceedings{Kelly2013,
	acmid = {2555555},
	address = {Riverton, NJ, USA},
	author = {Kelly, Diane},
	booktitle = {Proceedings of the 2013 Conference of the Center for Advanced Studies on Collaborative Research},
	date-added = {2022-02-17 21:33:31 -0500},
	date-modified = {2022-02-17 21:33:31 -0500},
	location = {Ontario, Canada},
	numpages = {12},
	pages = {299--310},
	publisher = {IBM Corp.},
	series = {CASCON '13},
	title = {Industrial Scientific Software: A Set of Interviews on Software Development},
	url = {http://dl.acm.org/citation.cfm?id=2555523.2555555},
	year = {2013},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxA1Li4vLi4vLi4vLi4vLi4vV29yay9SZXNlYXJjaC9SZWZlcmVuY2VzL0tlbGx5MjAxMy5wZGZPEQFkAAAAAAFkAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8NS2VsbHkyMDEzLnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAFAAQAAAogY3UAAAAAAAAAAAAAAAAAClJlZmVyZW5jZXMAAgA1LzpVc2VyczpzbWl0aHM6V29yazpSZXNlYXJjaDpSZWZlcmVuY2VzOktlbGx5MjAxMy5wZGYAAA4AHAANAEsAZQBsAGwAeQAyADAAMQAzAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAzVXNlcnMvc21pdGhzL1dvcmsvUmVzZWFyY2gvUmVmZXJlbmNlcy9LZWxseTIwMTMucGRmAAATAAEvAAAVAAIADf//AAAACAANABoAJABcAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAcQ=},
	bdsk-url-1 = {http://dl.acm.org/citation.cfm?id=2555523.2555555}}

@inproceedings{Smith2018,
	author = {W. Spencer Smith},
	booktitle = {2018 International Workshop on Software Engineering for Science (held in conjunction with ICSE'18)},
	date-added = {2022-02-17 21:20:59 -0500},
	date-modified = {2022-02-17 21:20:59 -0500},
	pages = {1--8},
	title = {Beyond Software Carpentry},
	year = {2018},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAdLi4vLi4vLi4vLi4vcHViL1NtaXRoMjAxOC5wZGZPEQE+AAAAAAE+AAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8NU21pdGgyMDE4LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAEAAIAAAogY3UAAAAAAAAAAAAAAAAAA3B1YgAAAgAmLzpVc2VyczpzbWl0aHM6UmVwb3M6cHViOlNtaXRoMjAxOC5wZGYADgAcAA0AUwBtAGkAdABoADIAMAAxADgALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASACRVc2Vycy9zbWl0aHMvUmVwb3MvcHViL1NtaXRoMjAxOC5wZGYAEwABLwAAFQACAA3//wAAAAgADQAaACQARAAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAGG}}

@article{AlNoamanyAndBorghi2018,
	abstract = {Research software, which includes both source code and executables used as part of
the research process, presents a significant challenge for efforts aimed at ensuring
reproducibility. In order to inform such efforts, we conducted a survey to better
understand the characteristics of research software as well as how it is created, used,
and shared by researchers. Based on the responses of 215 participants, representing a
range of research disciplines, we found that researchers create, use, and share software
in a wide variety of forms for a wide variety of purposes, including data collection,
data analysis, data visualization, data cleaning and organization, and automation. More
participants indicated that they use open source software than commercial software.
While a relatively small number of programming languages (e.g., Python, R, JavaScript,
C++, MATLAB) are used by a large number, there is a long tail of languages used by
relatively few. Between-group comparisons revealed that significantly more participants
from computer science write source code and create executables than participants from
other disciplines. Differences between researchers from computer science and other
disciplines related to the knowledge of best practices of software creation and sharing
were not statistically significant. While many participants indicated that they draw
a distinction between the sharing and preservation of software, related practices and
perceptions were often not aligned with those of the broader scholarly communications
community.

- has a table showing the top ten languages, includes Python, R, SQL, Javascript, C++, Matlab, Java, C, PHP and PERL},
	annote = {`` Software-related best practices have
been outlined for both individuals working in specific research disciplines (Eglen et al.,
2017; Marwick, 2017) and for the research community in general (e.g., Piccolo & Frampton,
2016; Sandve et al., 2013; Jimenez et al., 2017). In general, such best practice documents
focus on the importance of concepts such as proper documentation and version control
in ensuring that code is shared in a way that facilitates computational reproducibility. In
contrast, the focus of community organizations such as The Carpentries (Wilson, 2006;
Teal et al., 2015) and the Software Sustainability Institute (Crouch et al., 2013) is training
researchers to better develop, use, and maintain software tools. Bridging the perspectives of
stakeholders focused on encouraging best practices in sharing software and those focused
on educating researchers in its creation and use are organizations such as Force11, who
have published guidelines for describing and citing software in the scholarly literature
(Smith, Katz & Niemeyer, 2016).''

- found 81% use version control},
	author = {Yasmin AlNoamany and John A. Borghi},
	date-added = {2022-02-17 21:20:52 -0500},
	date-modified = {2022-02-17 21:20:52 -0500},
	journal = {PeerJ Computer Science},
	month = {September},
	number = {e163},
	pages = {1--25},
	title = {Towards computational reproducibility: researcher perspectives on the use and sharing of software},
	volume = {4},
	year = {2018},
	bdsk-url-1 = {https://peerj.com/articles/cs-163/#}}

@article{Wilson2006,
	author = {Gregory V.~Wilson},
	date-added = {2022-02-17 21:20:43 -0500},
	date-modified = {2022-02-17 21:20:43 -0500},
	journal = {American Scientist},
	number = {1},
	title = {Where's the Real Bottleneck in Scientific Computing? {S}cientists would do well to pick some tools widely used in the software industry},
	url = {http://www.americanscientist.org/issues/pub/wheres-the-real-bottleneck-in-scientific-computing},
	volume = {94},
	year = {2006},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxA2Li4vLi4vLi4vLi4vLi4vV29yay9SZXNlYXJjaC9SZWZlcmVuY2VzL1dpbHNvbjIwMDYucGRmTxEBZgAAAAABZgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////DldpbHNvbjIwMDYucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAABQAEAAAKIGN1AAAAAAAAAAAAAAAAAApSZWZlcmVuY2VzAAIANi86VXNlcnM6c21pdGhzOldvcms6UmVzZWFyY2g6UmVmZXJlbmNlczpXaWxzb24yMDA2LnBkZgAOAB4ADgBXAGkAbABzAG8AbgAyADAAMAA2AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgA0VXNlcnMvc21pdGhzL1dvcmsvUmVzZWFyY2gvUmVmZXJlbmNlcy9XaWxzb24yMDA2LnBkZgATAAEvAAAVAAIADf//AAAACAANABoAJABdAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAcc=},
	bdsk-url-1 = {http://www.americanscientist.org/issues/pub/wheres-the-real-bottleneck-in-scientific-computing}}

@book{GhezziEtAl2003,
	address = {Upper Saddle River, NJ, USA},
	annote = {Some summary notes

Chapter 8, Productivity

- one of the basic requirments of management in any engineering discipline is to measure the productivity of the people and processes involved in production
- need a metric for measuring software productivity
- an ideal productivity metric measures not lines of code, but the amount of value or functionaly produced per unit time - problem is we have no good way of quantifying the concept of functionality - motivated development of function points metric
- according to the function point method, five items (number of inputs, number of outputs, number of inquiries, number of files and number of interfaces) determine the complexity of an application.  The function point is the weighted sum of these five items.  The weights have been derived empirically.
- function point only counts user facing inputs, intefaces, etc.
- function point was derived empircally and has been  used extensively for business applications and information systems
- {function point is not necessarily suited to research software - different from business applications and the input and output can be relatively simple, with the complexity happening in the calculation step}

- productivity is also measured with size of code, need to make the definition unambiguous - should we count comments? should we count programming language ``statements'' or simply the number of lines? How many times should we count the lines in a file that is ``included'' several times?  Should we count declarations, or just executable statements?
- DSI - Delivered Source Instructions
- NSS - Noncommented Source Statements
- KLOC - thousand of lines of code
- easy to measure
- problematic because a program that is twice is big is not necessarily twice as good in any sense
	- reuse is not rewarded, productivity is better if you write it yourself
	- clever abstraction that reduces code size is generally good, but would be seen as negative productivity
	- using DSI means producing internal tools is a worthless activity
	- how should cancelled projects be counted?
	- fixing code decay looks like negative productivity
- an advantage of function points is that they can be measured without the code - they can even be used after the design to esimate the cost of a project (see COCOMO)

- Factors affecting productivity
	- changing to a new programming language?
	- new development process?
	- hiring an efficiency expert?

- one study that used lines of code as a metric found that the sinple most important factor affecting productivity was the capability of the personnel.  Half as import, but second on the list, was the complexity of the product, followed by required reliability and timing constrints.  Least important were scheduling constraints and previous experience with the languages on the project

- problems caused by an overly aggressive schedule
},
	author = {Carlo Ghezzi and Mehdi Jazayeri and Dino Mandrioli},
	date-added = {2022-02-17 20:49:14 -0500},
	date-modified = {2022-02-17 20:49:14 -0500},
	edition = {2nd},
	keywords = {software engineering},
	publisher = {Prentice Hall},
	title = {Fundamentals of Software Engineering},
	year = {2003}}

@misc{Szulik2017,
	author = {Keenan Szulik},
	date-added = {2022-02-17 20:41:11 -0500},
	date-modified = {2022-02-17 20:41:11 -0500},
	howpublished = {\url{https://blog.tidelift.com/dont-judge-a-project-by-its-github-stars-alone}},
	month = {December},
	title = {Don't judge a project by its GitHub stars alone},
	year = {2017},
	bdsk-url-1 = {https://blog.tidelift.com/dont-judge-a-project-by-its-github-stars-alone}}

@article{KaagstromEtAl1998,
	author = {K{\aa}gstr{\"o}m, Bo and Ling, Per and Van Loan, Charles},
	date-added = {2022-02-17 18:53:02 -0500},
	date-modified = {2022-02-17 18:53:02 -0500},
	journal = {ACM Transactions on Mathematical Software (TOMS)},
	number = {3},
	pages = {268--302},
	publisher = {ACM New York, NY, USA},
	title = {GEMM-based level 3 BLAS: High-performance model implementations and performance evaluation benchmark},
	volume = {24},
	year = {1998}}

@inproceedings{UditAndKatz2017,
	author = {Nangia, Udit and Katz, Daniel S.},
	date-added = {2022-02-17 18:32:42 -0500},
	date-modified = {2022-04-10 13:25:55 -0400},
	doi = {10.5281/zenodo.814220},
	month = jun,
	pages = {1--6},
	publisher = {Zenodo},
	title = {{Track 1 Paper: Surveying the U.S. National Postdoctoral Association Regarding Software Use and Training in Research}},
	year = 2017,
	bdsk-url-1 = {https://doi.org/10.5281/zenodo.814220},
	bdsk-url-2 = {https://danielskatz.org/papers/postdocsurveyfull_WSSSPE5.1.pdf}}

@article{Segal2005,
	author = {Segal, Judith},
	citeulike-article-id = {342252},
	date-added = {2022-02-17 18:09:03 -0500},
	date-modified = {2022-04-10 13:27:58 -0400},
	doi = {10.1007/s10664-005-3865-y},
	issn = {1382-3256},
	journal = {Empirical Software Engineering},
	keywords = {components, enginner, experiment, research, science},
	local-url = {file://localhost/Users/smiths/LongTermArchives/Work/Research/References/SciCompAndSoftEng/Segal2005.pdf},
	month = oct,
	number = {4},
	pages = {517--536},
	posted-at = {2006-08-11 01:21:33},
	priority = {4},
	publisher = {Kluwer Academic Publishers},
	title = {When Software Engineers Met Research Scientists: A Case Study},
	volume = {10},
	year = {2005},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxBrLi4vT0xEX1NWTi9tbXNjT0xEX1NWTi9Eb21haW5YL1poZW5nIFplbmcvV3JpdGluZ3MvUmVmZXJlbmNlcy9QYXBlcnNPblNvZnRFbmdBcHBsaWVkVG9TY2lDb21wL1NlZ2FsMjAwNS5wZGZPEQIKAAAAAAIKAAIAAAxNYWNpbnRvc2ggSEQAAAAAAAAAAAAAAAAAAAAAAAAAQkQAAf////8NU2VnYWwyMDA1LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAABAAgAAAogY3UAAAAAAAAAAAAAAAAAH1BhcGVyc09uU29mdEVuZ0FwcGxpZWRUb1NjaUNvbXAAAAIAfS86VXNlcnM6c21pdGhzOlJlcG9zOk9MRF9TVk46bW1zY09MRF9TVk46RG9tYWluWDpaaGVuZyBaZW5nOldyaXRpbmdzOlJlZmVyZW5jZXM6UGFwZXJzT25Tb2Z0RW5nQXBwbGllZFRvU2NpQ29tcDpTZWdhbDIwMDUucGRmAAAOABwADQBTAGUAZwBhAGwAMgAwADAANQAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAe1VzZXJzL3NtaXRocy9SZXBvcy9PTERfU1ZOL21tc2NPTERfU1ZOL0RvbWFpblgvWmhlbmcgWmVuZy9Xcml0aW5ncy9SZWZlcmVuY2VzL1BhcGVyc09uU29mdEVuZ0FwcGxpZWRUb1NjaUNvbXAvU2VnYWwyMDA1LnBkZgAAEwABLwAAFQACAA3//wAAAAgADQAaACQAkgAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAKg},
	bdsk-url-1 = {http://dx.doi.org/10.1007/s10664-005-3865-y}}

@inproceedings{CarverEtAl2007,
	address = {Washington, DC, USA},
	author = {Jeffrey C. Carver and Richard P. Kendall and Susan E. Squires and Douglass E. Post},
	booktitle = {ICSE '07: Proceedings of the 29th International Conference on Software Engineering},
	date-added = {2022-02-17 18:08:47 -0500},
	date-modified = {2022-02-17 18:08:47 -0500},
	doi = {http://dx.doi.org/10.1109/ICSE.2007.77},
	isbn = {0-7695-2828-7},
	local-url = {file://localhost/Users/smiths/LongTermArchives/Work/Research/References/SciCompAndSoftEng/CarverEtAl2007.pdf},
	pages = {550--559},
	publisher = {IEEE Computer Society},
	title = {Software Development Environments for Scientific and Engineering Software: A Series of Case Studies},
	year = {2007},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxA6Li4vLi4vLi4vLi4vLi4vV29yay9SZXNlYXJjaC9SZWZlcmVuY2VzL0NhcnZlckV0QWwyMDA3LnBkZk8RAXYAAAAAAXYAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////xJDYXJ2ZXJFdEFsMjAwNy5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAUABAAACiBjdQAAAAAAAAAAAAAAAAAKUmVmZXJlbmNlcwACADovOlVzZXJzOnNtaXRoczpXb3JrOlJlc2VhcmNoOlJlZmVyZW5jZXM6Q2FydmVyRXRBbDIwMDcucGRmAA4AJgASAEMAYQByAHYAZQByAEUAdABBAGwAMgAwADAANwAuAHAAZABmAA8AGgAMAE0AYQBjAGkAbgB0AG8AcwBoACAASABEABIAOFVzZXJzL3NtaXRocy9Xb3JrL1Jlc2VhcmNoL1JlZmVyZW5jZXMvQ2FydmVyRXRBbDIwMDcucGRmABMAAS8AABUAAgAN//8AAAAIAA0AGgAkAGEAAAAAAAACAQAAAAAAAAAFAAAAAAAAAAAAAAAAAAAB2w==},
	bdsk-url-1 = {http://dx.doi.org/10.1109/ICSE.2007.77}}

@article{SandersAndKelly2008,
	annote = {``None of our interviewees created an up-front formal requirements specification. If regulations in their field mandated a requirements document, they wrote it when the software was almost complete. Customers of the scientific software might provide a vision statement, but nothing more. In all cases, customers ceded decisions about the software to the scientists, giving them broad sway in deciding what to include in the software.''},
	author = {Rebecca Sanders and Diane Kelly},
	date-added = {2022-02-17 18:08:32 -0500},
	date-modified = {2022-02-17 18:08:32 -0500},
	journal = {IEEE Software},
	local-url = {/Users/smiths/LongTermArchives/Work/Research/References/SciCompAndSoftEng/SandersAndKelly2008.pdf},
	month = {July/August},
	pages = {21--28},
	title = {Dealing with Risk in Scientific Software Development},
	volume = {4},
	year = {2008},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAnLi4vLi4vLi4vLi4vcHViL1NhbmRlcnNBbmRLZWxseTIwMDgucGRmTxEBZgAAAAABZgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////F1NhbmRlcnNBbmRLZWxseTIwMDgucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAABAACAAAKIGN1AAAAAAAAAAAAAAAAAANwdWIAAAIAMC86VXNlcnM6c21pdGhzOlJlcG9zOnB1YjpTYW5kZXJzQW5kS2VsbHkyMDA4LnBkZgAOADAAFwBTAGEAbgBkAGUAcgBzAEEAbgBkAEsAZQBsAGwAeQAyADAAMAA4AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAuVXNlcnMvc21pdGhzL1JlcG9zL3B1Yi9TYW5kZXJzQW5kS2VsbHkyMDA4LnBkZgATAAEvAAAVAAIADf//AAAACAANABoAJABOAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAbg=}}

@inproceedings{HannayEtAl2009,
	acmid = {1556928},
	address = {Washington, DC, USA},
	author = {Hannay, Jo Erskine and MacLeod, Carolyn and Singer, Janice and Langtangen, Hans Petter and Pfahl, Dietmar and Wilson, Greg},
	booktitle = {Proceedings of the 2009 ICSE Workshop on Software Engineering for Computational Science and Engineering},
	date-added = {2022-02-17 18:08:25 -0500},
	date-modified = {2022-02-18 01:06:59 -0500},
	doi = {10.1109/SECSE.2009.5069155},
	isbn = {978-1-4244-3737-5},
	pages = {1--8},
	publisher = {IEEE Computer Society},
	series = {SECSE '09},
	title = {How Do Scientists Develop and Use Scientific Software?},
	year = {2009},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAiLi4vLi4vLi4vLi4vcHViL0hhbm5heUV0QWwyMDA5LnBkZk8RAVQAAAAAAVQAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////xJIYW5uYXlFdEFsMjAwOS5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAQAAgAACiBjdQAAAAAAAAAAAAAAAAADcHViAAACACsvOlVzZXJzOnNtaXRoczpSZXBvczpwdWI6SGFubmF5RXRBbDIwMDkucGRmAAAOACYAEgBIAGEAbgBuAGEAeQBFAHQAQQBsADIAMAAwADkALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAClVc2Vycy9zbWl0aHMvUmVwb3MvcHViL0hhbm5heUV0QWwyMDA5LnBkZgAAEwABLwAAFQACAA3//wAAAAgADQAaACQASQAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAGh},
	bdsk-url-1 = {http://dx.doi.org/10.1109/SECSE.2009.5069155}}

@inproceedings{PintoEtAl2016,
	author = {Pinto, Gustavo and Steinmacher, Igor and Gerosa, Marco Aur{\'e}lio},
	booktitle = {2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
	date-added = {2022-02-17 18:08:17 -0500},
	date-modified = {2022-02-17 18:08:17 -0500},
	doi = {10.1109/SANER.2016.68},
	pages = {112-123},
	title = {More Common Than You Think: An In-depth Study of Casual Contributors},
	volume = {1},
	year = {2016},
	bdsk-url-1 = {https://doi.org/10.1109/SANER.2016.68},
	bdsk-url-2 = {https://www.researchgate.net/profile/Marco-Aurelio-Gerosa/publication/303513465_More_Common_Than_You_Think_An_In-depth_Study_of_Casual_Contributors/links/5b2fdba4a6fdcc8506cb80d2/More-Common-Than-You-Think-An-In-depth-Study-of-Casual-Contributors.pdf}}

@inproceedings{PintoEtAl2018,
	abstract = {Although the goal of scientists is to do science, not to develop software, many scientists have extended their roles to include software development to their skills. However, since scientists have different background, it remains unclear how do they perceive software engineering practices or how do they acquire software engineering knowledge. In this paper we conducted an external replication of one influential 10 years paper about how scientists develop and use scientific software. In particular, we employed the same method (an on-line questionnaire) in a different population (R developers). When analyzing the more than 1,572 responses received, enriched with data gathered from their GitHub repositories, we correlated our findings with the original study. We found that the results were consistent in many ways, including: (1) scientists that develop software work mostly alone, (2) they decide themselves what they want to work on next, and (3) most of what they learnt came from self-study, rather than a formal education. However, we also uncover new facts, such as: some of the ``pain points'' regarding software development are not related to technical activities (e.g., interruptions, lack of collaborators, and lack of a reward system play a role). Our replication can help researchers, practitioners, and educators to better focus their efforts on topics that are important to the scientific community that develops software.},
	author = {Gustavo Pinto and Igor Wiese and Luis Felipe Dias},
	booktitle = {Proceedings of 25th IEEE International Conference on Software Analysis, Evolution and Reengineering},
	date-added = {2022-02-17 18:08:14 -0500},
	date-modified = {2022-02-17 18:08:14 -0500},
	doi = {10.1109/SANER.2018.8330263},
	month = feb,
	pages = {582-591},
	title = {How Do Scientists Develop and Use Scientific Software? An External Replication},
	year = {2018},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAhLi4vLi4vLi4vLi4vcHViL1BpbnRvRXRBbDIwMTgucGRmTxEBTgAAAAABTgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////EVBpbnRvRXRBbDIwMTgucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAABAACAAAKIGN1AAAAAAAAAAAAAAAAAANwdWIAAAIAKi86VXNlcnM6c21pdGhzOlJlcG9zOnB1YjpQaW50b0V0QWwyMDE4LnBkZgAOACQAEQBQAGkAbgB0AG8ARQB0AEEAbAAyADAAMQA4AC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAoVXNlcnMvc21pdGhzL1JlcG9zL3B1Yi9QaW50b0V0QWwyMDE4LnBkZgATAAEvAAAVAAIADf//AAAACAANABoAJABIAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAZo=},
	bdsk-url-1 = {https://doi.org/10.1109/SANER.2018.8330263}}

@inproceedings{Nguyen-HoanEtAl2010,
	acmid = {1852802},
	address = {New York, NY, USA},
	annote = {3.5 Documentation

Figure 13 shows the number of respondents who indi- cated they produce certain types of documentation. The most common type of documentation produced by respon- dents was comments in the code, selected by 51 out of 60 respondents. At the other end of the scale, requirements documentation is the least commonly produced type of doc- umentation with only 18 respondents indicating that they commonly produce such artifacts.
The comparative lack of documentation for requirements and design matches the experiences described by Sanders and Kelly [12]. In their study which involved interviewing 16 scientists, `none of [the] interviewees created an up-front formal requirements specification', and `Only one intervie- wee ... demonstrated his design documentation'.

In our survey, 42 out of 60 respondents indicated they commonly produced user manuals and/or guides. However, as seen in Section 3.4, only 25 respondents indicated they often or always produced software for larger groups of up to 100 people and/or an international community of users. Therefore, at least 17 respondents are producing user manu- als and/or guides for themselves or users in their local area. This is at odds with Sanders and Kelly [12], who noted that none of their interviewees `produced user documentation un- less their software was intended for use outside their research group'.

Only three respondents in our survey mentioned docu- mentation being required or compulsory by users or cus- tomers. However, each type of documentation was com- monly produced by around 20 to 40 of the 60 respondents. This contrasts to Segal [15] who identified that professional end user developers (non-software domain specialists who produce software for specific purposes) `did not voluntar- ily produce documentation, apart from the occasional user guide'.

The survey respondents were also asked why documenta- tion is or is not commonly produced for scientific software applications which they have worked on. From the 50 re- sponses to this open-ended question, a range of reasons both for an against the production of documentation were identi- fied using the coding data collection and analysis technique [13].
The most common reasons for and against the production of documentation and their popularity are shown in Figure 14. Note that these these reasons are not mutually exclusive and are not complete. Many respondents provided both rea- sons for and against the production of documentation. Some reasons were only provided by a single respondent and are not included above.},
	articleno = {12},
	author = {Nguyen-Hoan, Luke and Flint, Shayne and Sankaranarayana, Ramesh},
	booktitle = {Proceedings of the 2010 ACM-IEEE International Symposium on Empirical Software Engineering and Measurement},
	date-added = {2022-02-17 18:08:04 -0500},
	date-modified = {2022-04-10 13:26:13 -0400},
	doi = {10.1145/1852786.1852802},
	isbn = {978-1-4503-0039-1},
	keywords = {scientific software, scientists, software engineering, survey},
	location = {Bolzano-Bozen, Italy},
	numpages = {10},
	pages = {12:1--12:10},
	publisher = {ACM},
	series = {ESEM '10},
	title = {A Survey of Scientific Software Development},
	year = {2010},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAnLi4vLi4vLi4vLi4vcHViL05ndXllbi1Ib2FuRXRBbDIwMTAucGRmTxEBZgAAAAABZgACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////F05ndXllbi1Ib2FuRXRBbDIwMTAucGRmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAABAACAAAKIGN1AAAAAAAAAAAAAAAAAANwdWIAAAIAMC86VXNlcnM6c21pdGhzOlJlcG9zOnB1YjpOZ3V5ZW4tSG9hbkV0QWwyMDEwLnBkZgAOADAAFwBOAGcAdQB5AGUAbgAtAEgAbwBhAG4ARQB0AEEAbAAyADAAMQAwAC4AcABkAGYADwAaAAwATQBhAGMAaQBuAHQAbwBzAGgAIABIAEQAEgAuVXNlcnMvc21pdGhzL1JlcG9zL3B1Yi9OZ3V5ZW4tSG9hbkV0QWwyMDEwLnBkZgATAAEvAAAVAAIADf//AAAACAANABoAJABOAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAbg=},
	bdsk-url-1 = {http://doi.acm.org/10.1145/1852786.1852802},
	bdsk-url-2 = {http://dx.doi.org/10.1145/1852786.1852802}}

@other{OrvizEtAl2017,
	abstract = {The purpose of this document is to define a set of quality  standards, procedures and best practices to conform a Software Quality Assurance plan to serve as a reference within the European research ecosystem related projects for the adequate development and timely delivery of software products.},
	author = {Pablo Orviz and {\'A}lvaro L{\'o}pez Garc{\'\i}a and Doina Cristina Duma and Giacinto Donvito and Mario David and Jorge Gomes},
	date-added = {2022-02-17 17:34:22 -0500},
	date-modified = {2022-02-17 17:34:22 -0500},
	doi = {10.20350/digitalCSIC/12543},
	organization = {The INDIGO-DataCloud, DEEP-Hybrid-DataCloud and eXtreme-DataCloud projects have received funding from the European Union's Horizon 2020 research and innovation programme under grant agreement number 653549, 777435 and 777367 respectively},
	title = {A set of common software quality assurance baseline criteria for research projects},
	year = {2017},
	bdsk-url-1 = {https://doi.org/10.20350/digitalCSIC/12543}}

@misc{vanGompelEtAl2016,
	author = {Maarten van Gompel and Jauco Noordzij and Reinier de Valk and Andrea Scharnhorst},
	date-added = {2022-02-17 17:05:41 -0500},
	date-modified = {2022-02-17 17:05:41 -0500},
	howpublished = {\url{https://github.com/CLARIAH/software-quality-guidelines/blob/master/softwareguidelines.pdf}},
	month = {September},
	title = {Guidelines for Software Quality, {CLARIAH} Task Force 54.100},
	year = {2016},
	bdsk-url-1 = {https://github.com/CLARIAH/software-quality-guidelines/blob/master/softwareguidelines.pdf}}

@misc{ThielEtAl2020,
	author = {Carsten Thiel},
	date-added = {2022-02-17 17:05:34 -0500},
	date-modified = {2022-02-17 17:05:34 -0500},
	howpublished = {\url{https://technical-reference.readthedocs.io/en/latest/}},
	title = {{EURISE} Network Technical Reference},
	year = {2020},
	bdsk-url-1 = {https://technical-reference.readthedocs.io/en/latest/}}

@misc{HerouxEtAl2008,
	author = {Michael A. Heroux and James M. Bieman and Robert T. Heaphy},
	date-added = {2022-02-17 17:05:25 -0500},
	date-modified = {2022-02-17 17:05:25 -0500},
	howpublished = {\url{https://faculty.csbsju.edu/mheroux/fall2012_csci330/TrilinosDevGuide2.pdf}},
	month = {April},
	title = {Trilinos Developers Guide Part {II}: {ASC} Softwar Quality Engineering Practices Version 2.0},
	year = {2008},
	bdsk-url-1 = {https://faculty.csbsju.edu/mheroux/fall2012_csci330/TrilinosDevGuide2.pdf}}

@misc{SmithAndRoscoe2018,
	abstractnote = {We are working toward the development of an Extreme-scale Scientific Software Development Kit (xSDK)---a collection of related and complementary software elements that provide the building blocks, tools, models, processes, and related artifacts for rapid and efficient development of high-quality applications. As an initial step in creating the xSDK, we have written a set of xSDK community package policies that a software package must satisfy in order to be ​xSDK compatible​. The designation of a package being xSDK compatible informs potential users that the package can be easily used with other xSDK libraries and components and thus helps to address issues in long-term sustainability and interoperability among packages.},
	author = {Smith, Barry and Bartlett, Roscoe and Developers, xSDK},
	date-added = {2022-02-17 17:05:15 -0500},
	date-modified = {2022-04-10 13:28:40 -0400},
	doi = {10.6084/m9.figshare.4495136.v6},
	month = {Dec},
	publisher = {figshare},
	title = {xSDK Community Package Policies},
	year = {2018},
	bdsk-url-1 = {https://figshare.com/articles/journal_contribution/xSDK_Community_Package_Policies/4495136/6},
	bdsk-url-2 = {https://doi.org/10.6084/m9.figshare.4495136.v6}}

@article{WilsonEtAl2016,
	author = {Greg Wilson and Jennifer Bryan and Karen Cranston and Justin Kitzes and Lex Nederbragt and Tracy K. Teal},
	bibsource = {dblp computer science bibliography, http://dblp.org},
	biburl = {http://dblp.uni-trier.de/rec/bib/journals/corr/WilsonBCKNT16},
	date-added = {2022-02-17 17:05:08 -0500},
	date-modified = {2022-02-17 17:05:08 -0500},
	journal = {CoRR},
	timestamp = {Wed, 07 Jun 2017 14:42:20 +0200},
	title = {Good Enough Practices in Scientific Computing},
	url = {http://arxiv.org/abs/1609.00037},
	volume = {abs/1609.00037},
	year = {2016},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAiLi4vLi4vLi4vLi4vcHViL1dpbHNvbkV0QWwyMDE2LnBkZk8RAVQAAAAAAVQAAgAADE1hY2ludG9zaCBIRAAAAAAAAAAAAAAAAAAAAAAAAABCRAAB/////xJXaWxzb25FdEFsMjAxNi5wZGYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////AAAAAAAAAAAAAAAAAAQAAgAACiBjdQAAAAAAAAAAAAAAAAADcHViAAACACsvOlVzZXJzOnNtaXRoczpSZXBvczpwdWI6V2lsc29uRXRBbDIwMTYucGRmAAAOACYAEgBXAGkAbABzAG8AbgBFAHQAQQBsADIAMAAxADYALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAClVc2Vycy9zbWl0aHMvUmVwb3MvcHViL1dpbHNvbkV0QWwyMDE2LnBkZgAAEwABLwAAFQACAA3//wAAAAgADQAaACQASQAAAAAAAAIBAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAGh},
	bdsk-url-1 = {http://arxiv.org/abs/1609.00037}}

@misc{BrettEtAl2021,
	author = {Alys Brett and James Cook and Peter Fox and Ian Hinder and John Nonweiler and Richard Reeve and Robert Turner},
	date-added = {2022-02-17 17:04:59 -0500},
	date-modified = {2022-02-17 17:04:59 -0500},
	howpublished = {\url{https://github.com/ScottishCovidResponse/modelling-software-checklist/blob/main/software-checklist.md}},
	month = {August},
	title = {Scottish Covid-19 Response Consortium},
	year = {2021},
	bdsk-url-1 = {https://github.com/ScottishCovidResponse/modelling-software-checklist/blob/main/software-checklist.md}}

@misc{TobiasEtAl2018,
	author = {Schlauch, Tobias and Meinel, Michael and Haupt, Carina},
	date-added = {2022-02-17 17:04:52 -0500},
	date-modified = {2022-04-10 13:27:23 -0400},
	doi = {10.5281/zenodo.1344612},
	month = aug,
	publisher = {Zenodo},
	title = {{DLR} Software Engineering Guidelines},
	version = {1.0.0},
	year = 2018,
	bdsk-url-1 = {https://doi.org/10.5281/zenodo.1344612}}

@misc{USGS2019,
	author = {{USGS}},
	date-added = {2022-02-17 17:04:45 -0500},
	date-modified = {2022-02-17 17:04:45 -0500},
	howpublished = {\url{https://www.usgs.gov/media/files/usgs-software-planning-checklist}},
	month = {December},
	title = {{USGS} Software Plannning Checklist},
	year = {2019},
	bdsk-url-1 = {https://www.usgs.gov/media/files/usgs-software-planning-checklist}}

@misc{SmithEtAl2021,
	author = {W. Spencer Smith and Jacques Carette and Peter Michalski and Ao Dong and Oluwaseun Owojaiye},
	date-added = {2022-02-16 13:47:56 -0500},
	date-modified = {2022-02-16 13:47:56 -0500},
	howpublished = {\url{https://arxiv.org/ abs/2110.11575}},
	month = {October},
	title = {Methodology for Assessing the State of the Practice for Domain {X}},
	year = {2021},
	bdsk-file-1 = {YnBsaXN0MDDSAQIDBFxyZWxhdGl2ZVBhdGhZYWxpYXNEYXRhXxAhLi4vLi4vTWV0aG9kb2xvZ3kvTWV0aG9kb2xvZ3kucGRmTxEBigAAAAABigACAAAMTWFjaW50b3NoIEhEAAAAAAAAAAAAAAAAAAAAAAAAAEJEAAH/////D01ldGhvZG9sb2d5LnBkZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAgACAAAKIGN1AAAAAAAAAAAAAAAAAAtNZXRob2RvbG9neQAAAgBGLzpVc2VyczpzbWl0aHM6UmVwb3M6QUlNU1M6U3RhdGVPZlByYWN0aWNlOk1ldGhvZG9sb2d5Ok1ldGhvZG9sb2d5LnBkZgAOACAADwBNAGUAdABoAG8AZABvAGwAbwBnAHkALgBwAGQAZgAPABoADABNAGEAYwBpAG4AdABvAHMAaAAgAEgARAASAERVc2Vycy9zbWl0aHMvUmVwb3MvQUlNU1MvU3RhdGVPZlByYWN0aWNlL01ldGhvZG9sb2d5L01ldGhvZG9sb2d5LnBkZgATAAEvAAAVAAIADf//AAAACAANABoAJABIAAAAAAAAAgEAAAAAAAAABQAAAAAAAAAAAAAAAAAAAdY=},
	bdsk-url-1 = {https://arxiv.org/abs/2110.11575}}

@book{Saaty1980,
	address = {New York, New York},
	author = {T. L. Saaty},
	date-added = {2022-02-16 10:57:05 -0500},
	date-modified = {2022-02-16 10:57:05 -0500},
	publisher = {McGraw-Hill Publishing Company},
	title = {The Analytic Hierarchy Process: Planning, Priority Setting, Resource Allocation},
	year = {1980}}

@mastersthesis{Michalski2021,
	address = {Hamilton, Ontario, Canada},
	author = {Peter Michalski},
	date-added = {2022-02-16 10:07:40 -0500},
	date-modified = {2022-02-16 10:07:40 -0500},
	month = {September},
	school = {McMaster University},
	title = {State of The Practice for Lattice Boltzmann Method Software},
	year = {2021}}

@mastersthesis{Dong2021,
	address = {Hamilton, ON, Canada},
	author = {Ao Dong},
	date-added = {2022-02-16 10:07:30 -0500},
	date-modified = {2022-02-16 10:07:30 -0500},
	month = {September},
	school = {McMaster University},
	title = {Assessing the State of the Practice for Medical Imaging Software},
	year = {2021}}

@misc{SmithEtAl2018_StatSoft,
	author = {W. Spencer Smith and Yue Sun and Jacques Carette},
	date-added = {2022-02-16 10:07:15 -0500},
	date-modified = {2022-02-16 10:07:15 -0500},
	howpublished = {\url{https://arxiv.org/abs/1802.07362}},
	journal = {arXiv},
	note = {33 pp.},
	title = {Statistical Software for Psychology: Comparing Development Practices Between {CRAN} and Other Communities},
	year = {2018}}

@article{SmithEtAl2018,
	author = {W. Spencer Smith and Zheng Zeng and Jacques Carette},
	date-added = {2022-02-16 10:07:05 -0500},
	date-modified = {2022-02-16 10:07:05 -0500},
	journal = {Journal of Seismology},
	keywords = {seismology, scientific computing, software quality model, analytic hierarchy process, software engineering},
	month = {May},
	number = {3},
	pages = {755--788},
	title = {Seismology Software: State of the Practice},
	volume = {22},
	year = {2018}}

@misc{SmithEtAl2018_arXivGIS,
	author = {W. Spencer Smith and Adam Lazzarato and Jacques Carette},
	date-added = {2022-02-16 10:06:14 -0500},
	date-modified = {2022-02-16 10:06:14 -0500},
	howpublished = {\url{https://arxiv.org/abs/1802.03422}},
	month = feb,
	title = {State of the Practice for {GIS} Software},
	year = {2018}}

@article{SmithEtAl2016,
	author = {W. Spencer Smith and Adam Lazzarato and Jacques Carette},
	date-added = {2022-02-16 09:55:14 -0500},
	date-modified = {2022-02-16 09:55:14 -0500},
	journal = {Advances in Engineering Software},
	month = oct,
	pages = {53--71},
	title = {State of Practice for Mesh Generation Software},
	volume = {100},
	year = {2016}}
